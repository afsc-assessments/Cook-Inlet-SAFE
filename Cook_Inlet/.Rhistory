source('Cook_Inlet_functions.R')
#Load Data
stock <- 'Kenai Sockeye'
#Data <- read.csv(file=paste0(getwd(),'/',stock,'/', 'Data.csv'))
Forecast <- read.csv(file=paste0(getwd(),'/',stock,'/', 'Forecasts.csv'))
Table <- read.csv(file=paste0(getwd(),'/',stock,'/', 'Table.csv'))
#Function arguments
buffer_window <- 10
gen_lag <- 5
y_obj <- 2025
preseason <- T
postseason <- F
F_state_forecast_method <- 'arima' #naive, or arima
run_forecast_method <- 'arima' #sibling or arima
#Data inputs
C_total=Table['Total.Kenai.R..Catch']
C_EEZ=Table['Kenai.R..EEZ.Catch']
Run=Table['Run']
Esc=Table['Escapement']
# SMSY
Esc_goal = Table$Smsy[Table$Year==max(Table$Year)]
Esc_goal_pre = Table$Smsy[Table$Year==max(Table$Year)]
years=Table['Year']
sib_forecast = Forecast$Kenai.Total.Run.Forecast[Forecast$Year==y_obj]/1000
sib_forecast_full = Forecast$Kenai.Total.Run.Forecast[Forecast$Year<=y_obj]/1000
#Calculate OFL to ABC Buffer
buffer_ABC <- buffer_fun_ABC(buffer_window=buffer_window,
y_obj=y_obj,
sib_forecast=sib_forecast,
C_total=C_total,
C_EEZ=C_EEZ,Run=Run,
Esc=Esc,
Esc_goal=Esc_goal_pre,
years=years,
gen_lag=gen_lag,
F_state_forecast_method=F_state_forecast_method,
run_forecast_method=run_forecast_method)
#Perform Tier 1 Calculations
Tier_1_Table <- Tier_1_fun(y_obj=y_obj,
sib_forecast=sib_forecast,
C_total=C_total,
C_EEZ=C_EEZ,
Run=Run,
Esc=Esc,
Esc_goal=Esc_goal,
Esc_goal_pre=Esc_goal_pre,
years=years,
ABC_buffer=buffer_ABC$buffer,
buffer_ABC = buffer_ABC,#ABC_buffer=0.478,
preseason = preseason,
postseason=postseason,
plot = F,
# run_forecast_method= "arima",
gen_lag=gen_lag,
F_state_forecast_method=F_state_forecast_method,
run_forecast_method=run_forecast_method,
sib_forecast_full = sib_forecast_full)
#Perform Tier 1 Calculations
Tier_1_Table <- Tier_1_fun(y_obj=y_obj,
sib_forecast=sib_forecast,
C_total=C_total,
C_EEZ=C_EEZ,
Run=Run,
Esc=Esc,
Esc_goal=Esc_goal,
Esc_goal_pre=Esc_goal_pre,
years=years,
ABC_buffer=buffer_ABC$buffer,
buffer_ABC = buffer_ABC,#ABC_buffer=0.478,
preseason = preseason,
postseason=postseason,
plot = T,
# run_forecast_method= "arima",
gen_lag=gen_lag,
F_state_forecast_method=F_state_forecast_method,
run_forecast_method=run_forecast_method,
sib_forecast_full = sib_forecast_full)
#Load packages
library(forecast)
library(car)
library(boot)
library(zoo)
library(tidyverse)
library(ggthemes)
library(ggtext)
library(ggpubr)
library(Metrics)
source('Cook_Inlet_functions.R')
#Load Data
stock <- 'Kasilof Sockeye'
# Data <- read.csv(file=paste0(getwd(),'/',stock,'/', 'Data.csv'))
Forecast <- read.csv(file=paste0(getwd(),'/',stock,'/', 'Forecasts.csv'))
Table <- read.csv(file=paste0(getwd(),'/',stock,'/', 'Table.csv'))
#Function arguments
buffer_window <- 10
gen_lag <- 5
y_obj <- 2025
preseason <- TRUE
postseason <- FALSE
F_state_forecast_method <- 'arima' #naive, or arima
run_forecast_method <- 'arima' #sibling or arima
#Data inputs
C_total=Table['Total.Kasilof.R..Catch']
C_EEZ=Table['Kasilof.R..EEZ.Catch']
Run=Table['Run']
Esc=Table['Escapement']
Esc_goal=Table$Lower.Bound.of.Goal
Esc_goal_pre = Table$Lower.Bound.of.Goal[Table$Year==max(Table$Year)]
# SMSY
# Esc_goal = (222000/1000)
# Esc_goal_pre = (222000/1000)
#Esc_goal_pre = Esc_goal
years=Table['Year']
sib_forecast = Forecast$Run.Forecast[Forecast$Year==y_obj]/1000
# sib_forecast_full = Forecast
sib_forecast_full <- Forecast$Run.Forecast[Forecast$Year<=y_obj]/1000
#Calculate OFL to ABC Buffer
buffer_ABC <- buffer_fun_ABC(buffer_window=buffer_window,
y_obj=y_obj, #+1 if creating comparison plots
sib_forecast=sib_forecast,
C_total=C_total,
C_EEZ=C_EEZ,
Run=Run, Esc=Esc,
Esc_goal=Esc_goal_pre,
years=years,
gen_lag=gen_lag,
F_state_forecast_method=F_state_forecast_method,
run_forecast_method='arima')
#Perform Tier 1 Calculations
Tier_1_Table <- Tier_1_fun(y_obj=y_obj,
sib_forecast=sib_forecast,
C_total=C_total,
C_EEZ=C_EEZ,Run=Run,
Esc=Esc,
Esc_goal=Esc_goal,
Esc_goal_pre=Esc_goal_pre,
years=years,
ABC_buffer=buffer_ABC$buffer,
buffer_ABC = buffer_ABC,
preseason = preseason,
postseason=postseason,
gen_lag=gen_lag,
F_state_forecast_method=F_state_forecast_method,
run_forecast_method=run_forecast_method,
sib_forecast_full = sib_forecast_full)
library(ggpubr)
library(tidyverse)
library(gtools)
library(ggthemes)
library(readxl)
library(lubridate)
# load in all the harvest data for plotting'
Table_coho <- read.csv(file=paste0(getwd(),'/','UCI Coho/Table.csv'))
Table_coho$Stock <- "Coho"
Table_coho$EEZ.Catch <- Table_coho$EEZ.Catch/1000
Table_coho$ABC_2024 <- 35769/1000
Table_coho$OFLpre_2025 <- 67013/1000
Table_coho$ABC_2025 <- 6701/1000
Table_chum <- read.csv(file=paste0(getwd(),'/','UCI Chum/Table.csv'))
Table_chum$Stock <- "Chum"
Table_chum$EEZ.Catch <- Table_chum$EEZ.Catch/1000
Table_chum$ABC_2024 <- 110432/1000
Table_chum$OFLpre_2025 <- 97508/1000
Table_chum$ABC_2025 <- 78006/1000
Table_Pink_Odd <- read.csv(file=paste0(getwd(),'/','UCI Pink Odd/Table.csv'))
Table_Pink_Odd$Stock <- "Pink Odd"
Table_Pink_Odd$EEZ.Catch <- Table_Pink_Odd$EEZ.Catch/1000
Table_Pink_Odd$OFLpre_2025 <- 58174/1000
Table_Pink_Odd$ABC_2025 <-52357/1000
Table_Pink_even <- read.csv(file=paste0(getwd(),'/','UCI Pink Even/Table.csv'))
Table_Pink_even$Stock <- "Pink Even"
Table_Pink_even$EEZ.Catch <- Table_Pink_even$EEZ.Catch/1000
Table_Pink_even$ABC_2024 <- 135218/1000
Table_Pink_even$ABC_2025 <- NA
Table_Sockeye <- read.csv(file=paste0(getwd(),'/','UCI Sockeye/Table.csv'))
# Table_Sockeye$Stock <- "Other Sockeye"
Table_Sockeye$EEZ.Catch <- Table_Sockeye$EEZ.Catch/1000
Table_Sockeye$ABC_2024 <- 177493/1000
Table_Sockeye$OFLpre_2025 <- 181351/1000
Table_Sockeye$ABC_2025 <- 154148/1000
# Table_Sockeye[nrow(Table_Sockeye)+1,]<-NA
# Table_Sockeye[nrow(Table_Sockeye), "Year"] <- 2024 #workaround for plotting
# Table_Sockeye[nrow(Table_Sockeye), "EEZ.Catch"] <- 84102/1000 #workaround for plotting
Table_Sockeye$Stock <- "Other Sockeye"
Table_Kasilof <- read.csv(file=paste0(getwd(),'/','Kasilof Sockeye/Table.csv'))
Table_Kasilof <- Table_Kasilof %>%
rename(EEZ.Catch = Kasilof.R..EEZ.Catch)
Table_Kasilof$ABC_2024 <- 375512/1000
Table_Kasilof$OFLpre_2025 <- 664294/1000
Table_Kasilof$ABC_2025 <- 130701/1000
# Table_Kasilof[nrow(Table_Kasilof)+1,]<-NA
# Table_Kasilof[nrow(Table_Kasilof), "Year"] <- 2024 #workaround for plotting
# Table_Kasilof[nrow(Table_Kasilof), "EEZ.Catch"] <- 28900/1000 #workaround for plotting
Table_Kasilof$Stock <- "Kasilof Sockeye"
Table_Kenai <- read.csv(file=paste0(getwd(),'/','Kenai Sockeye/Table.csv'))
# Table_Kenai$Stock <- "Kenai Sockeye"
Table_Kenai <- Table_Kenai %>%
rename(EEZ.Catch = Kenai.R..EEZ.Catch)
Table_Kenai$ABC_2024 <- 431123/1000
Table_Kenai$OFLpre_2025 <- 514761/1000
Table_Kenai$ABC_2025 <- 168485/1000
# Table_Kenai[nrow(Table_Kenai)+1,]<-NA
# Table_Kenai[nrow(Table_Kenai), "Year"] <- 2024 #workaround for plotting
# Table_Kenai[nrow(Table_Kenai), "EEZ.Catch"] <- 211717/1000 #workaround for plotting
Table_Kenai$Stock <- "Kenai Sockeye"
Table_Chinook <- read.csv(file=paste0(getwd(),'/','All Chinook/Table.csv'))
Table_Chinook$Stock <- "Chinook"
Table_Chinook$EEZ.Catch <- Table_Chinook$EEZ.Catch/1000
Table_Chinook$ABC_2024 <- 270/1000
Table_Chinook$OFLpre_2025 <- 373/1000
Table_Chinook$ABC_2025 <- 261/1000
# 2024 Inseason Catch Data
Catch_2024_master <- read_xlsx(path  = paste0(getwd(),'/','Inseason_Catch/CIS_data_2024_FINAL_20Nov24.xlsx'))
Catch_2024 <- read.csv( file = paste0(getwd(),"/Inseason_Catch/2024 EEZ Catch.csv"))
# Convert date to date object
Catch_2024_master <-  Catch_2024_master %>%
mutate(OPENER_DATE = as.Date(OPENER_DATE), format = "%d-%M-%y")
Catch_2024 <- Catch_2024 %>%
mutate(OPENER_DATE = as.Date(OPENER_DATE), format = "%d-%M-%y")
Catch_2024$SPECIES <- factor(Catch_2024$SPECIES)
levels(Catch_2024$SPECIES) <- c("Chinook",
"Chum",
"Coho",
"Kasilof sockeye",
"Kenai sockeye",
"Other sockeye",
"Pink",
"Sockeye"
)
# Calculate cumulative catch
Catch_2024 <- Catch_2024 %>%
group_by(SPECIES) %>%
mutate(CUMULATIVE_CATCH = cumsum(CATCH_PER_DAY)) %>%
as.data.frame()
Catch_2024 <- Catch_2024 %>%
group_by(SPECIES) %>%
mutate(Perc_Tac = (max(CUMULATIVE_CATCH)/TAC_2024)*100) %>%
data.frame()
# Catch_2024$SPECIES <- factor(Catch_2024$SPECIES, levels = c("Sockeye",
#                                                             "Chinook",
#                                                             "Coho","Chum",
#                                                             "Pink"))
# Colorblind color scheme
colorBlindBlack8  <- c("#000000", "#E69F00", "#56B4E9", "#009E73",
"#F0E442", "#0072B2", "#D55E00", "#CC79A7")
# Plot of Annual estimated EEZ harvest and the current and past OFL/ABC ########
masterDF <- smartbind(Table_Chinook,
Table_coho,
Table_chum,
Table_Kasilof,
Table_Kenai,
Table_Pink_even,
Table_Pink_Odd,
Table_Sockeye)
# Add factor identifying hist est vs known catch
masterDF$Catch_status <- ifelse(masterDF$Year<=2023,"Estimated", "Known")
masterDF$ABC_2024 <- as.numeric(masterDF$ABC_2024)
masterDF$OFLpre_2025 <- as.numeric(masterDF$OFLpre_2025)
masterDF$ABC_2025 <- as.numeric(masterDF$ABC_2025)
masterDF <- masterDF[,c("Year","EEZ.Catch", "ABC_2024","Stock","OFLpre_2025","ABC_2025","Catch_status")]
masterDF$Stock <- factor(masterDF$Stock, levels = c("Kenai Sockeye",
"Kasilof Sockeye",
"Other Sockeye",
"Chinook",
"Coho",
"Chum",
"Pink Even",
"Pink Odd"))
Catch.trend.plot <- ggplot(masterDF, aes(x = Year, y = EEZ.Catch))+
geom_line()+
geom_point(aes(shape = Catch_status),size=2)+
labs(y = "EEZ Catch ('000's of fish)")+
geom_hline(aes(yintercept = ABC_2024,
linetype = "ABC 2024",
color = "ABC 2024"),
size = 1)+
geom_hline(aes(yintercept = OFLpre_2025,
linetype = "OFLpre 2025",
color = "OFLpre 2025"),
size = 1)+
theme_classic()+
geom_hline(aes(yintercept = ABC_2025,
linetype = "Recomended ABC 2025",
color = "Recomended ABC 2025"),
size = 1.2)+
theme_classic()+
scale_color_manual(name = "",
values = c(colorBlindBlack8[c(2,4,6)]))+
scale_linetype_manual(values = c(2,3,4),
name = "")+
scale_shape(name = "")+
coord_cartesian(xlim = c(1999,2025))+
facet_wrap(~Stock, scales = "free_y", nrow = 4)+
theme(
# plot.margin = unit(c(5.5,10,5.5,5.5),"points"),
axis.text.x = element_text(angle = 90),
legend.position = "top",
legend.background = element_blank(),
legend.text = element_text(size = 10),
axis.title = element_text(size = 12),
axis.text = element_text(size = 12)
)
Catch.trend.plot
png(filename = paste0(getwd(),'/Figures/2025 Catch vs ABC all species.png'),
width = 625, height = 800)
Catch.trend.plot
dev.off()
png(filename = paste0(getwd(),'/Figures/2025 Catch vs ABC all species.png'),
width = 625, height = 700)
Catch.trend.plot
dev.off()
Catch.trend.plot <- ggplot(masterDF, aes(x = Year, y = EEZ.Catch))+
geom_line()+
geom_point(aes(shape = Catch_status),size=2)+
labs(y = "EEZ Catch ('000's of fish)")+
geom_hline(aes(yintercept = ABC_2024,
linetype = "ABC 2024",
color = "ABC 2024"),
size = 1)+
geom_hline(aes(yintercept = OFLpre_2025,
linetype = "OFLpre 2025",
color = "OFLpre 2025"),
size = 1)+
theme_classic()+
geom_hline(aes(yintercept = ABC_2025,
linetype = "Recomended ABC 2025",
color = "Recomended ABC 2025"),
size = 1.2)+
theme_classic()+
scale_color_manual(name = "",
values = c(colorBlindBlack8[c(2,4,6)]))+
scale_linetype_manual(values = c(2,3,4),
name = "")+
scale_shape(name = "")+
coord_cartesian(xlim = c(1999,2025))+
facet_wrap(~Stock, scales = "free_y", nrow = 4)+
theme(
# plot.margin = unit(c(5.5,10,5.5,5.5),"points"),
axis.text.x = element_text(angle = 90),
legend.position = "top",
legend.background = element_blank(),
legend.text = element_text(size = 12),
axis.title = element_text(size = 12),
axis.text = element_text(size = 12)
)
Catch.trend.plot
png(filename = paste0(getwd(),'/Figures/2025 Catch vs ABC all species.png'),
width = 625, height = 700)
Catch.trend.plot
dev.off()
#Load packages
library(forecast)
library(car)
library(boot)
library(tidyverse)
library(ggthemes)
library(ggpubr)
library(ggtext)
library(Metrics)
source('Cook_Inlet_functions.R')
#Load Data
stock <- 'Kenai Sockeye'
#Data <- read.csv(file=paste0(getwd(),'/',stock,'/', 'Data.csv'))
Forecast <- read.csv(file=paste0(getwd(),'/',stock,'/', 'Forecasts.csv'))
Table <- read.csv(file=paste0(getwd(),'/',stock,'/', 'Table.csv'))
#Function arguments
buffer_window <- 10
gen_lag <- 5
y_obj <- 2025
preseason <- T
postseason <- F
F_state_forecast_method <- 'arima' #naive, or arima
run_forecast_method <- 'arima' #sibling or arima
#Data inputs
C_total=Table['Total.Kenai.R..Catch']
C_EEZ=Table['Kenai.R..EEZ.Catch']
Run=Table['Run']
Esc=Table['Escapement']
# SMSY
Esc_goal = Table$Smsy[Table$Year==max(Table$Year)]
Esc_goal_pre = Table$Smsy[Table$Year==max(Table$Year)]
years=Table['Year']
sib_forecast = Forecast$Kenai.Total.Run.Forecast[Forecast$Year==y_obj]/1000
sib_forecast_full = Forecast$Kenai.Total.Run.Forecast[Forecast$Year<=y_obj]/1000
#Calculate OFL to ABC Buffer
buffer_ABC <- buffer_fun_ABC(buffer_window=buffer_window,
y_obj=y_obj,
sib_forecast=sib_forecast,
C_total=C_total,
C_EEZ=C_EEZ,Run=Run,
Esc=Esc,
Esc_goal=Esc_goal_pre,
years=years,
gen_lag=gen_lag,
F_state_forecast_method=F_state_forecast_method,
run_forecast_method=run_forecast_method)
buffer_ABC
# Lwr Bound
Esc_goal = Table$Lower.Bound.of.Goal
Esc_goal_pre = Table$Lower.Bound.of.Goal[Table$Year==max(Table$Year)]
#Calculate OFL to ABC Buffer
buffer_ABC <- buffer_fun_ABC(buffer_window=buffer_window,
y_obj=y_obj,
sib_forecast=sib_forecast,
C_total=C_total,
C_EEZ=C_EEZ,Run=Run,
Esc=Esc,
Esc_goal=Esc_goal_pre,
years=years,
gen_lag=gen_lag,
F_state_forecast_method=F_state_forecast_method,
run_forecast_method=run_forecast_method)
buffer_ABC
View(buffer_ABC)
31/80
7,607+
7607+
18+
3031+
2012+
6432+
1666
7607+
18+
3031+
2012+
6432+
1666+4434
4434/25200
6250/41679
960169/115545
# Load packages
library(forecast)
library(car)
library(boot)
library(tidyverse)
library(ggthemes)
library(ggpubr)
library(ggtext)
library(Metrics)
source('Cook_Inlet_functions.R')
# Load Data
stock <- 'Kenai Sockeye'
Forecast <- read.csv(file=paste0(getwd(),'/',stock,'/', 'Forecasts.csv'))
Table <- read.csv(file=paste0(getwd(),'/',stock,'/', 'Table.csv'))
# Function arguments
buffer_window <- 10
gen_lag <- 5
y_obj <- 2025
preseason <- T
postseason <- F
F_state_forecast_method <- 'arima' #naive, or arima
run_forecast_method <- 'arima' #sibling or arima
# Data inputs
C_total=Table['TotalCatch']
C_EEZ=Table['EEZCatch']
Run=Table['Run']
Esc=Table['Escapement']
years=Table['Year']
# Esc goal using lwr bound
# Lwr Bound
Esc_goal = Table$Lower
Esc_goal_pre = Table$Lower[Table$Year==max(Table$Year)]
# State forecast for comparison
sib_forecast = Forecast$Kenai.Total.Run.Forecast[Forecast$Year==y_obj]/1000
sib_forecast_full = Forecast$Kenai.Total.Run.Forecast[Forecast$Year<=y_obj]/1000
# Calculate OFL to ABC Buffer
buffer_ABC <- buffer_fun_ABC(buffer_window=buffer_window,
y_obj=y_obj,
sib_forecast=sib_forecast,
C_total=C_total,
C_EEZ=C_EEZ,Run=Run,
Esc=Esc,
Esc_goal=Esc_goal_pre,
years=years,
gen_lag=gen_lag,
F_state_forecast_method=F_state_forecast_method,
run_forecast_method=run_forecast_method)
postseason <- T
# Calculate OFL to ABC Buffer
buffer_ABC <- buffer_fun_ABC(buffer_window=buffer_window,
y_obj=y_obj,
sib_forecast=sib_forecast,
C_total=C_total,
C_EEZ=C_EEZ,Run=Run,
Esc=Esc,
Esc_goal=Esc_goal_pre,
years=years,
gen_lag=gen_lag,
F_state_forecast_method=F_state_forecast_method,
run_forecast_method=run_forecast_method)
# Perform Tier 1 Calculations
Tier_1_Table <- Tier_1_fun(y_obj=y_obj,
sib_forecast=sib_forecast,
C_total=C_total,
C_EEZ=C_EEZ,
Run=Run,
Esc=Esc,
Esc_goal=Esc_goal,
Esc_goal_pre=Esc_goal_pre,
years=years,
ABC_buffer=buffer_ABC$buffer,
buffer_ABC = buffer_ABC,#ABC_buffer=0.478,
preseason = preseason,
postseason=postseason,
plot = T,
# run_forecast_method= "arima",
gen_lag=gen_lag,
F_state_forecast_method=F_state_forecast_method,
run_forecast_method=run_forecast_method,
sib_forecast_full = sib_forecast_full)
Tier_1_Table
