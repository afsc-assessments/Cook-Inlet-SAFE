# init = inits_ll,
chains = n.chains,
iter = n.iter,
thin = n.thin,
cores = mc.cores,
# adjust this for treedepth warnings/div chains warnings
# control = list(max_treedepth = 25, adapt_delta = 0.99),
verbose = F,
save_warmup = F
)
# Extract parameter estimates for plotting & analysis ##########################
pars <- rstan::extract(fit)
OFL_pre_smsy <- (pars$post_curr_predRunsize - Esc_goal_smsy ) -
(pars$post_curr_predRunsize * pars$Fstate)
OFL_pre_lwr <- (pars$post_curr_predRunsize - (Table$Lower[Table$Year==y]*1000) ) -
(pars$post_curr_predRunsize * pars$Fstate)
# Get the CDF to calculate probabilies for statements
OFL_cdf_smsy <- ecdf(OFL_pre_smsy)
OFL_cdf_lwr <- ecdf(OFL_pre_lwr)
OFL_cdf_smsy(0)
OFL_cdf_lwr(0)
hist(OFL_pre_smsy)
ABC_smsy <- OFL_pre_smsy * (1-OFL_cdf_smsy(0))
ABC_smsy
ABC_smsy <- median(OFL_pre_smsy) * (1-OFL_cdf_smsy(0))
ABC_smsy
median(OFL_pre_smsy)
n
n
retroDF$median.OFLpre.SMSY[retroDF$Year == y] <- median(OFL_pre_smsy)
retroDF$median.OFLpre.lwr[retroDF$Year == y] <- median(OFL_pre_lwr)
retroDF$median.runsize[retroDF$Year == y] <- median(pars$post_curr_predRunsize)
retroDF$median.stateF[retroDF$Year == y] <- median(pars$post_curr_predFstate)
# Plots of the PF fit
# Calulate quantiles for data
quant.predRun <- apply(X = exp(pars$ln_predRunsize),
MARGIN = 2,
FUN = quantile,
probs=c(0.025, 0.25, 0.5, 0.75, 0.975),
na.rm = T)
plot.df <- data.frame(years,
runsize,
t(quant.predRun),
"Obs.")
names(plot.df) <- c("Year","Run","low95","low50","median",
"up50","up95","cat")
curr <- quantile(pars$post_curr_predRunsize,probs = c(0.025, 0.25, 0.5, 0.75, 0.975))
curr.df <- data.frame(Year = y,
Run =  real.PF,
low95 = unname(curr[1]),
low50 =  unname(curr[2]),
median =  unname(curr[3]),
up50 =  unname(curr[4]),
up95 =  unname(curr[5]),
cat = "Curr. Year")
plot.df <- rbind(plot.df, curr.df)
# Plot the run size prediction
PF.plot <- plot.df %>%
ggplot(aes(x = Year, y = Run))+
# geom_point(aes(col = "Run Size"))+
geom_ribbon(aes(ymin = low95, ymax = up95, fill = "95% CI"), alpha = .6)+
geom_ribbon(aes(ymin = low50, ymax = up50, fill = "50% CI"), alpha = .6)+
geom_line(aes(y = median, col = "Median"), linewidth = 1.22)+
geom_line(aes(col = cat))+
geom_point(aes(col = cat), size = 2)+
# scale_fill_colorblind(name = "")+
# scale_color_colorblind(name ="")+
scale_color_manual(name="",
values = colorBlindBlack8[c(1,3,7,7,7)],
breaks = c("Median", "Obs.", "Curr. Year"))+
scale_fill_manual(name="",
values = colorBlindBlack8[c(7,2)],
breaks = c("50% CI", "95% CI"))+
ggtitle(label = paste0("PF for year=",y))+
labs(y="Total run size (000's)")+
theme_clean()+
theme(legend.position = "top",
axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
plot.background = element_blank(),
legend.background = element_blank()
)
PF.plot
(1-OFL_cdf_smsy(0))
ABC_smsy
pars$Fstate
Table$Total.Catch
Table$EEZCatch
Table$Run
Table$Run
Table$Total.Catch
Table
df2 <- Table
# Table <- read.csv(file=paste0(getwd(),'/',stock,'/', 'Table.csv'))
Table <- read.csv(file=paste0(getwd(),'/',stock,'/', 'Total Run Size Long.csv'))
df2 <- Table
df2
df2$EEZCatch <- df2$EEZCatch*1000
df2$Total.Catch <- df2$Total.Catch*1000
df2$Lower <- *1000
df2$Lower <- df2$Lower *1000
df2
write.csv(x = df2,file = paste0(getwd(),"/Kenai Sockeye/Total Run Size Long.csv"))
require(tidybayes)
# Parralize for optimum model run time (Speeds things up...)
rstan_options(auto_write = TRUE)
mc.cores = parallel::detectCores()
# set to working directory (Set to directory with all the necessary folders)
wd <- getwd()
# Objects used to save/load data, outputs, or stan/R scripts
# To use this, one must have folders with these names in the working directory
# dir.output <- file.path(wd,"output")
# dir.figs <- file.path(wd,"figs")
dir.stan <- file.path(wd,"stan")
######### Import Data ###############
stock <- 'Kenai Sockeye'
# Data <- read.csv(file=paste0(getwd(),'/',stock,'/', 'Data.csv'))
Forecast <- read.csv(file=paste0(getwd(),'/',stock,'/', 'Forecasts.csv'))
# Table <- read.csv(file=paste0(getwd(),'/',stock,'/', 'Table.csv'))
Table <- read.csv(file=paste0(getwd(),'/',stock,'/', 'Total Run Size Long.csv'))
# Control Section ##############################################################
model.version = "AR1_logit_long"
# MCMC Parameters
n.chains = 4
n.iter = 10000
n.thin = 2
# Year projection is made
# myYear <- 2024
start.year <- 1979
#SMSY point for Kenai
Esc_goal_smsy = (1212000)
# Years used in testing
testyears <- c(1999:2024)
#Kenai
Table$Pot_yield_SMSY <- Table$Run - Esc_goal_smsy - (Table$Total.Catch - Table$EEZCatch)
Table$Pot_yield_lwr <- Table$Run - Table$Lower - (Table$Total.Catch - Table$EEZCatch)
# Data frame to hold results
retroDF <- data.frame("Year" = testyears,
"Stock"  = stock,
"Model" = model.version,
"Iterations" = n.iter,
"median.runsize" = NA,
"median.stateF" = NA,
"median.OFLpre.SMSY" = NA,
"median.OFLpre.lwr" = NA,
"ABC_Smsy_cumprob" = NA,
"ABC_lwr_cumprob" = NA,
"OFL_true_smsy" = Table$Pot_yield_SMSY[Table$Year%in%testyears],
"OFL_true_lwr" = Table$Pot_yield_lwr[Table$Year%in%testyears])
# List to hold plots
plot.list <- list()
# # Fstate Kenai
Table$C_state <- Table$Total.Catch - Table$EEZCatch
Table$F_state <- Table$C_state/Table$Run
Table
estBetaParams <- function(mu, var) {
alpha <- ((1 - mu) / var - 1 / mu) * mu ^ 2
beta <- alpha * (1 / mu - 1)
return(params = list(alpha = alpha, beta = beta))
}
colorBlindBlack8  <- c("#000000", "#E69F00", "#56B4E9", "#009E73",
"#F0E442", "#0072B2", "#D55E00", "#CC79A7")
y <- 2017
# Year Used
years <- Table$Year[Table$Year < y &
Table$Year>= start.year]
n.years <- length(years)
# Realized past run sizes
runsize <- Table$Run[Table$Year < y &
Table$Year >= start.year]
# The predicted years truth for plotting
real.PF <- Table$Run[Table$Year == y]
# Historic F
F_state <- Table$F_state[Table$Year < y &
Table$Year>=1999]
# True F for plotting
real.F <- Table$F_state[Table$Year == y]
params <-estBetaParams(mu=mean(Table$F_state,na.rm = T), var = sd(Table$F_state,na.rm = T)^2)
A <- params$alpha
B <- params$beta
# Call the stan model
fit <- stan(file = file.path(dir.stan,paste("UCI_",
model.version ,
".stan",
sep = "")),
data = list(n_years = n.years,
run_hist = runsize,
# F_state_hist = F_state,
A = A,
B=B),
# init = inits_ll,
chains = n.chains,
iter = n.iter,
thin = n.thin,
cores = mc.cores,
# adjust this for treedepth warnings/div chains warnings
# control = list(max_treedepth = 25, adapt_delta = 0.99),
verbose = F,
save_warmup = F
)
# Extract parameter estimates for plotting & analysis ##########################
pars <- rstan::extract(fit)
OFL_pre_smsy <- (pars$post_curr_predRunsize - Esc_goal_smsy ) -
(pars$post_curr_predRunsize * pars$Fstate)
OFL_pre_lwr <- (pars$post_curr_predRunsize - (Table$Lower[Table$Year==y]*1000) ) -
(pars$post_curr_predRunsize * pars$Fstate)
# Get the CDF to calculate probabilies for statements
OFL_cdf_smsy <- ecdf(OFL_pre_smsy)
OFL_cdf_lwr <- ecdf(OFL_pre_lwr)
ABC_smsy <- median(OFL_pre_smsy) * (1-OFL_cdf_smsy(0))
OFL_cdf_lwr(0)
ABC_smsy
hist(OFL_cdf_lwr())
hist(OFL_pre_lwr)
OFL_pre_lwr <- (pars$post_curr_predRunsize - (Table$Lower[Table$Year==y]) ) -
(pars$post_curr_predRunsize * pars$Fstate)
# Get the CDF to calculate probabilies for statements
OFL_cdf_smsy <- ecdf(OFL_pre_smsy)
OFL_cdf_lwr <- ecdf(OFL_pre_lwr)
ABC_smsy <- median(OFL_pre_smsy) * (1-OFL_cdf_smsy(0))
OFL_cdf_lwr(0)
ABC_smsy <- median(OFL_pre_smsy) * (1-OFL_cdf_smsy(0))
ABC_smsy
ABC_smsy <- round(median(OFL_pre_smsy) * (1-OFL_cdf_smsy(0)))
ABC_smsy
retroDF$ABC_Smsy_cumprob[retroDF$Year==y] <- round(median(OFL_pre_smsy) * (1-OFL_cdf_smsy(0)))
retroDF
# Data frame to hold results
retroDF <- data.frame("Year" = testyears,
"Stock"  = stock,
"Model" = model.version,
"Iterations" = n.iter,
"median.runsize" = NA,
"median.stateF" = NA,
"median.OFLpre.SMSY" = NA,
"median.OFLpre.lwr" = NA,
"ABC_Smsy_cumprob" = NA,
"ABC_lwr_cumprob" = NA,
"OFL_true_smsy" = Table$Pot_yield_SMSY[Table$Year%in%testyears],
"OFL_true_lwr" = Table$Pot_yield_lwr[Table$Year%in%testyears])
# List to hold plots
plot.list <- list()
# # Fstate Kenai
Table$C_state <- Table$Total.Catch - Table$EEZCatch
Table$F_state <- Table$C_state/Table$Run
estBetaParams <- function(mu, var) {
alpha <- ((1 - mu) / var - 1 / mu) * mu ^ 2
beta <- alpha * (1 / mu - 1)
return(params = list(alpha = alpha, beta = beta))
}
colorBlindBlack8  <- c("#000000", "#E69F00", "#56B4E9", "#009E73",
"#F0E442", "#0072B2", "#D55E00", "#CC79A7")
for(y in testyears){
# y <- 2017
# Year Used
years <- Table$Year[Table$Year < y &
Table$Year>= start.year]
n.years <- length(years)
# Realized past run sizes
runsize <- Table$Run[Table$Year < y &
Table$Year >= start.year]
# The predicted years truth for plotting
real.PF <- Table$Run[Table$Year == y]
# Historic F
F_state <- Table$F_state[Table$Year < y &
Table$Year>=1999]
# True F for plotting
real.F <- Table$F_state[Table$Year == y]
params <-estBetaParams(mu=mean(Table$F_state,na.rm = T), var = sd(Table$F_state,na.rm = T)^2)
A <- params$alpha
B <- params$beta
# PDO <- lag.PDO.mean$lag.PDO[lag.PDO.mean$Year>1999 &
#                               lag.PDO.mean$Year <= y]
# Inits list
# inits <-function(){
#   #
#   list("alpha_R" = runif(1,0,20),
#        "beta_R" = runif(1,0,1),
#        "theta" = runif(1,-1,0),
#        "mu" = runif(1,-1,1),
#        "sigma" = runif(1,0,1),
#        "sigma_F"=runif(1,0,1)
#
#
#   )
# }
# inits_ll <- list(inits(), inits(), inits(), inits())
# Call the stan model
fit <- stan(file = file.path(dir.stan,paste("UCI_",
model.version ,
".stan",
sep = "")),
data = list(n_years = n.years,
run_hist = runsize,
# F_state_hist = F_state,
A = A,
B=B),
# init = inits_ll,
chains = n.chains,
iter = n.iter,
thin = n.thin,
cores = mc.cores,
# adjust this for treedepth warnings/div chains warnings
# control = list(max_treedepth = 25, adapt_delta = 0.99),
verbose = F,
save_warmup = F
)
# Trace plots to check for convergence parameters of interest
# traceplot(object = fit, c(
#   "alpha_R",
#   "beta_R",
#   "theta",
#   "mu",
#   "sigma",
#   "sigma_F"
# ))
# Launch shiny app (Eady way to look at diagnostic plots) ######################
# shinystan::launch_shinystan(as.shinystan(fit)) # Uncomment to use
# Extract parameter estimates for plotting & analysis ##########################
pars <- rstan::extract(fit)
OFL_pre_smsy <- (pars$post_curr_predRunsize - Esc_goal_smsy ) -
(pars$post_curr_predRunsize * pars$Fstate)
OFL_pre_lwr <- (pars$post_curr_predRunsize - (Table$Lower[Table$Year==y]) ) -
(pars$post_curr_predRunsize * pars$Fstate)
# Get the CDF to calculate probabilies for statements
OFL_cdf_smsy <- ecdf(OFL_pre_smsy)
OFL_cdf_lwr <- ecdf(OFL_pre_lwr)
# Use the cum prob of overfished to set abc
retroDF$ABC_Smsy_cumprob[retroDF$Year==y] <- round(median(OFL_pre_smsy) * (1-OFL_cdf_smsy(0)))
retroDF$ABC_lwr_cumprob[retroDF$Year==y] <- round(median(OFL_pre_lwr) * (1-OFL_cdf_lwr(0)))
# OFLpre_point <- median(OFL_pre_smsy)
retroDF$median.OFLpre.SMSY[retroDF$Year == y] <- median(OFL_pre_smsy)
retroDF$median.OFLpre.lwr[retroDF$Year == y] <- median(OFL_pre_lwr)
retroDF$median.runsize[retroDF$Year == y] <- median(pars$post_curr_predRunsize)
retroDF$median.stateF[retroDF$Year == y] <- median(pars$post_curr_predFstate)
# Plots of the PF fit
# Calulate quantiles for data
quant.predRun <- apply(X = exp(pars$ln_predRunsize),
MARGIN = 2,
FUN = quantile,
probs=c(0.025, 0.25, 0.5, 0.75, 0.975),
na.rm = T)
plot.df <- data.frame(years,
runsize,
t(quant.predRun),
"Obs.")
names(plot.df) <- c("Year","Run","low95","low50","median",
"up50","up95","cat")
curr <- quantile(pars$post_curr_predRunsize,probs = c(0.025, 0.25, 0.5, 0.75, 0.975))
curr.df <- data.frame(Year = y,
Run =  real.PF,
low95 = unname(curr[1]),
low50 =  unname(curr[2]),
median =  unname(curr[3]),
up50 =  unname(curr[4]),
up95 =  unname(curr[5]),
cat = "Curr. Year")
plot.df <- rbind(plot.df, curr.df)
# Plot the run size prediction
PF.plot <- plot.df %>%
ggplot(aes(x = Year, y = Run))+
# geom_point(aes(col = "Run Size"))+
geom_ribbon(aes(ymin = low95, ymax = up95, fill = "95% CI"), alpha = .6)+
geom_ribbon(aes(ymin = low50, ymax = up50, fill = "50% CI"), alpha = .6)+
geom_line(aes(y = median, col = "Median"), linewidth = 1.22)+
geom_line(aes(col = cat))+
geom_point(aes(col = cat), size = 2)+
# scale_fill_colorblind(name = "")+
# scale_color_colorblind(name ="")+
scale_color_manual(name="",
values = colorBlindBlack8[c(1,3,7,7,7)],
breaks = c("Median", "Obs.", "Curr. Year"))+
scale_fill_manual(name="",
values = colorBlindBlack8[c(7,2)],
breaks = c("50% CI", "95% CI"))+
ggtitle(label = paste0("PF for year=",y))+
labs(y="Total run size (000's)")+
theme_clean()+
theme(legend.position = "top",
axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
plot.background = element_blank(),
legend.background = element_blank()
)
# FSTATE plots ##
# Calulate quantiles for data
# quant.predF <- apply(X = (pars$pred_Fstate),
#                      MARGIN = 2,
#                      FUN = quantile,
#                      probs=c(0.025, 0.25, 0.5, 0.75, 0.975),
#                      na.rm = T)
# plot.F.df <- data.frame(years,
#                         F_state,
#                         # t(quant.predF),
#                         "Obs.")
#
# names(plot.F.df) <- c("Year","Fstate","low95","low50","median",
#                       "up50","up95","cat")
#
# curr.Fstate <- quantile(pars$post_curr_predFstate,
#                         probs = c(0.025, 0.25, 0.5, 0.75, 0.975))
#
# curr.F.df <- data.frame(Year = y,
#                         Fstate =  real.F,
#                         low95 = unname(curr.Fstate[1]),
#                         low50 =  unname(curr.Fstate[2]),
#                         median =  unname(curr.Fstate[3]),
#                         up50 =  unname(curr.Fstate[4]),
#                         up95 =  unname(curr.Fstate[5]),
#                         cat = "Curr. Year")
#
# plot.F.df <- rbind(plot.F.df, curr.F.df)
#
#
# Fstate.plot <- plot.F.df %>%
#   ggplot(aes(x = Year, y = Fstate))+
#   geom_ribbon(aes(ymin = low95, ymax = up95, fill = "95% CI"), alpha = .6)+
#   geom_ribbon(aes(ymin = low50, ymax = up50, fill = "50% CI"), alpha = .6)+
#   geom_point(aes(col = cat), size = 2)+
#   geom_line(aes(col = cat))+
#   geom_line(aes(y = median, col = "Median"),linewidth = 1.22)+
#   coord_cartesian(ylim = c(0,1))+
#   # scale_fill_colorblind(name="")+
#   scale_color_manual(name="",
#                      values = colorBlindBlack8[c(1,3,7,7,7)],
#                      breaks = c("Median", "Obs.", "Curr. Year"))+
#   scale_fill_manual(name="",
#                     values = colorBlindBlack8[c(7,2)],
#                     breaks = c("50% CI", "95% CI"))+
#   ggtitle(label = paste0("Fstate forecast for year=",y))+
#   theme_clean()+
#   theme(legend.position = "top",
#         axis.text = element_text(size = 12),
#         axis.title = element_text(size = 14),
#         plot.background = element_blank(),
#         legend.background = element_blank()
#   )
plot.list[[paste0("pf_",y)]] <- PF.plot
# plot.list[[paste0("Fstate_",y)]] <- Fstate.plot
print(paste0("Finally done with year = ",y))
} # Close loop
# Join with true run size and state F
retroDF<- left_join(retroDF, Table[c('Year','Run','F_state')])
allStockDF <- rbind(retroDF)
allStockDF %>%
group_by(Stock,Model) %>%
summarise(Run_MAPE = mape(predicted = median.runsize, actual = Run),
F_MAPE = mape(predicted = median.stateF, actual = F_state)) %>%
pivot_longer(cols = c(Run_MAPE,F_MAPE)) %>%
ggplot(aes(x = factor(Stock), y = value))+
geom_point(aes(col = Model))+
facet_wrap(~factor(name))
# CalculateOFL_true_smsy# Calculate the ABC across a range of buffers
allStockDF$buffer <- NA
allStockDF$ABC_lwr <- NA
allStockDF$ABC_smsy <- NA
allStockDF$err_lwr <- NA
allStockDF$err_smsy <- NA
allStockDF$perc_err_lwr <- NA
allStockDF$perc_err_smsy <- NA
buffer <- seq(.1,.9,.01)
for (b in 1:length(buffer)) {
# b <- 1
buff <- buffer[b]
tempDF <- allStockDF
tempDF$ABC_lwr <- tempDF$median.OFLpre.lwr*(1-buff)
tempDF$ABC_smsy <- tempDF$median.OFLpre.SMSY*(1-buff)
tempDF$err_lwr <- tempDF$ABC_lwr - tempDF$OFL_true_lwr
tempDF$err_smsy <- tempDF$ABC_smsy - tempDF$OFL_true_smsy
tempDF$perc_err_lwr <- (tempDF$err_lwr/tempDF$OFL_true_lwr)*100
tempDF$perc_err_smsy <- (abs(tempDF$err_smsy)/(abs(tempDF$OFL_true_smsy)))*100
tempDF$buffer <- buff*100
if(b==1){finalDF <- tempDF}else{finalDF <- rbind(finalDF, tempDF)}
}
# Calculate the probability of overforecasting
finalDF$yes_over <- NA
finalDF$yes_over <- ifelse(finalDF$err_smsy>0,1,0)
propDF <- finalDF %>%
group_by(buffer) %>%
summarise(sum(yes_over)/length(testyears))
propDF
finalDF$cum_prob_err_smsy <- finalDF$ABC_Smsy_cumprob -finalDF$OFL_true_smsy
finalDF$cum_prob_err_lwr <- finalDF$ABC_lwr_cumprob -finalDF$OFL_true_lwr
finalDF$ABC_lwr_cumprob
finalDF$yes_over_cum_prob_smsy <- ifelse(finalDF$cum_prob_err_smsy>0,1,0)
sum(finalDF$yes_over_cum_prob_smsy)/length(testyears)
propDF <- finalDF %>%
group_by(buffer) %>%
summarise(sum(yes_over)/length(testyears))
propDF
View(propDF)
buffer <- seq(.1,.9,.1)
for (b in 1:length(buffer)) {
# b <- 1
buff <- buffer[b]
tempDF <- allStockDF
tempDF$ABC_lwr <- tempDF$median.OFLpre.lwr*(1-buff)
tempDF$ABC_smsy <- tempDF$median.OFLpre.SMSY*(1-buff)
tempDF$err_lwr <- tempDF$ABC_lwr - tempDF$OFL_true_lwr
tempDF$err_smsy <- tempDF$ABC_smsy - tempDF$OFL_true_smsy
tempDF$perc_err_lwr <- (tempDF$err_lwr/tempDF$OFL_true_lwr)*100
tempDF$perc_err_smsy <- (abs(tempDF$err_smsy)/(abs(tempDF$OFL_true_smsy)))*100
tempDF$buffer <- buff*100
if(b==1){finalDF <- tempDF}else{finalDF <- rbind(finalDF, tempDF)}
}
# Calculate the probability of overforecasting
finalDF$yes_over <- NA
finalDF$yes_over <- ifelse(finalDF$err_smsy>0,1,0)
propDF <- finalDF %>%
group_by(buffer) %>%
summarise(sum(yes_over)/length(testyears))
propDF
