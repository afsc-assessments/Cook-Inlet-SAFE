run_forecast_method <- 'arima' #sibling or arima
# Data inputs
C_total=Table['TotalCatch']
C_EEZ=Table['EEZCatch']
Run=Table['Run']
Esc=Table['Escapement']
years=Table['Year']
# Esc goal using SMSY
Esc_goal = Table$Smsy[Table$Year==max(Table$Year)]
Esc_goal_pre = Table$Smsy[Table$Year==max(Table$Year)]
# State forecast for comparison
sib_forecast = Forecast$Kenai.Total.Run.Forecast[Forecast$Year==y_obj]/1000
sib_forecast_full = Forecast$Kenai.Total.Run.Forecast[Forecast$Year<=y_obj]/1000
# Calculate OFL to ABC Buffer
buffer_ABC <- buffer_fun_ABC(buffer_window=buffer_window,
y_obj=y_obj,
sib_forecast=sib_forecast,
C_total=C_total,
C_EEZ=C_EEZ,Run=Run,
Esc=Esc,
Esc_goal=Esc_goal_pre,
years=years,
gen_lag=gen_lag,
F_state_forecast_method=F_state_forecast_method,
run_forecast_method=run_forecast_method)
# Perform Tier 1 Calculations
Tier_1_Table <- Tier_1_fun(y_obj=y_obj,
sib_forecast=sib_forecast,
C_total=C_total,
C_EEZ=C_EEZ,
Run=Run,
Esc=Esc,
Esc_goal=Esc_goal,
Esc_goal_pre=Esc_goal_pre,
years=years,
ABC_buffer=buffer_ABC$buffer,
buffer_ABC = buffer_ABC,#ABC_buffer=0.478,
preseason = preseason,
postseason=postseason,
plot = T,
# run_forecast_method= "arima",
gen_lag=gen_lag,
F_state_forecast_method=F_state_forecast_method,
run_forecast_method=run_forecast_method,
sib_forecast_full = sib_forecast_full)
Tier_1_Table
View(Table)
# Load Data
stock <- 'Kenai Sockeye'
Forecast <- read.csv(file=paste0(getwd(),'/',stock,'/', 'Forecasts.csv'))
Table <- read.csv(file=paste0(getwd(),'/',stock,'/', 'Table.csv'))
# Function arguments
buffer_window <- 10
gen_lag <- 5
y_obj <- 2024
preseason <- T
postseason <- F
F_state_forecast_method <- 'arima' #naive, or arima
run_forecast_method <- 'arima' #sibling or arima
# Data inputs
C_total=Table['TotalCatch']
C_EEZ=Table['EEZCatch']
Run=Table['Run']
Esc=Table['Escapement']
years=Table['Year']
# Esc goal using SMSY
Esc_goal = Table$Smsy[Table$Year==max(Table$Year)]
Esc_goal_pre = Table$Smsy[Table$Year==max(Table$Year)]
# State forecast for comparison
sib_forecast = Forecast$Kenai.Total.Run.Forecast[Forecast$Year==y_obj]/1000
sib_forecast_full = Forecast$Kenai.Total.Run.Forecast[Forecast$Year<=y_obj]/1000
# Calculate OFL to ABC Buffer
buffer_ABC <- buffer_fun_ABC(buffer_window=buffer_window,
y_obj=y_obj,
sib_forecast=sib_forecast,
C_total=C_total,
C_EEZ=C_EEZ,Run=Run,
Esc=Esc,
Esc_goal=Esc_goal_pre,
years=years,
gen_lag=gen_lag,
F_state_forecast_method=F_state_forecast_method,
run_forecast_method=run_forecast_method)
# Perform Tier 1 Calculations
Tier_1_Table <- Tier_1_fun(y_obj=y_obj,
sib_forecast=sib_forecast,
C_total=C_total,
C_EEZ=C_EEZ,
Run=Run,
Esc=Esc,
Esc_goal=Esc_goal,
Esc_goal_pre=Esc_goal_pre,
years=years,
ABC_buffer=buffer_ABC$buffer,
buffer_ABC = buffer_ABC,#ABC_buffer=0.478,
preseason = preseason,
postseason=postseason,
plot = T,
# run_forecast_method= "arima",
gen_lag=gen_lag,
F_state_forecast_method=F_state_forecast_method,
run_forecast_method=run_forecast_method,
sib_forecast_full = sib_forecast_full)
Tier_1_Table
# Perform Tier 1 Calculations
Tier_1_Table <- Tier_1_fun(y_obj=y_obj,
sib_forecast=sib_forecast,
C_total=C_total,
C_EEZ=C_EEZ,
Run=Run,
Esc=Esc,
Esc_goal=Esc_goal,
Esc_goal_pre=Esc_goal_pre,
years=years,
ABC_buffer=buffer_ABC$buffer,
buffer_ABC = buffer_ABC,#ABC_buffer=0.478,
preseason = preseason,
postseason=postseason,
plot = T,
# run_forecast_method= "arima",
gen_lag=gen_lag,
F_state_forecast_method=F_state_forecast_method,
run_forecast_method=run_forecast_method,
sib_forecast_full = sib_forecast_full)
# Perform Tier 1 Calculations
Tier_1_Table <- Tier_1_fun(y_obj=y_obj,
sib_forecast=sib_forecast,
C_total=C_total,
C_EEZ=C_EEZ,
Run=Run,
Esc=Esc,
Esc_goal=Esc_goal,
Esc_goal_pre=Esc_goal_pre,
years=years,
ABC_buffer=buffer_ABC$buffer,
buffer_ABC = buffer_ABC,#ABC_buffer=0.478,
preseason = preseason,
postseason=postseason,
plot = F,
# run_forecast_method= "arima",
gen_lag=gen_lag,
F_state_forecast_method=F_state_forecast_method,
run_forecast_method=run_forecast_method,
sib_forecast_full = sib_forecast_full)
Tier_1_Table
# Load Data
stock <- 'Kenai Sockeye'
Forecast <- read.csv(file=paste0(getwd(),'/',stock,'/', 'Forecasts.csv'))
Table <- read.csv(file=paste0(getwd(),'/',stock,'/', 'Table.csv'))
# Function arguments
buffer_window <- 10
gen_lag <- 5
y_obj <- 2025
preseason <- T
postseason <- F
F_state_forecast_method <- 'arima' #naive, or arima
run_forecast_method <- 'arima' #sibling or arima
# Data inputs
C_total=Table['TotalCatch']
C_EEZ=Table['EEZCatch']
Run=Table['Run']
Esc=Table['Escapement']
years=Table['Year']
# Esc goal using SMSY
Esc_goal = Table$Smsy[Table$Year==max(Table$Year)]
Esc_goal_pre = Table$Smsy[Table$Year==max(Table$Year)]
# State forecast for comparison
sib_forecast = Forecast$Kenai.Total.Run.Forecast[Forecast$Year==y_obj]/1000
sib_forecast_full = Forecast$Kenai.Total.Run.Forecast[Forecast$Year<=y_obj]/1000
# Calculate OFL to ABC Buffer
buffer_ABC <- buffer_fun_ABC(buffer_window=buffer_window,
y_obj=y_obj,
sib_forecast=sib_forecast,
C_total=C_total,
C_EEZ=C_EEZ,Run=Run,
Esc=Esc,
Esc_goal=Esc_goal_pre,
years=years,
gen_lag=gen_lag,
F_state_forecast_method=F_state_forecast_method,
run_forecast_method=run_forecast_method)
# Perform Tier 1 Calculations
Tier_1_Table <- Tier_1_fun(y_obj=y_obj,
sib_forecast=sib_forecast,
C_total=C_total,
C_EEZ=C_EEZ,
Run=Run,
Esc=Esc,
Esc_goal=Esc_goal,
Esc_goal_pre=Esc_goal_pre,
years=years,
ABC_buffer=buffer_ABC$buffer,
buffer_ABC = buffer_ABC,#ABC_buffer=0.478,
preseason = preseason,
postseason=postseason,
plot = F,
# run_forecast_method= "arima",
gen_lag=gen_lag,
F_state_forecast_method=F_state_forecast_method,
run_forecast_method=run_forecast_method,
sib_forecast_full = sib_forecast_full)
Tier_1_Table
Esc_goal
Esc_goal_pre
C_total
View(Tier_1_Table)
1-.268
# Load packages
library(forecast)
library(car)
library(boot)
library(zoo)
library(tidyverse)
library(ggthemes)
library(ggtext)
library(ggpubr)
library(Metrics)
source('Cook_Inlet_functions.R')
# Load Data
stock <- 'Kasilof Sockeye'
Forecast <- read.csv(file=paste0(getwd(),'/',stock,'/', 'Forecasts.csv'))
Table <- read.csv(file=paste0(getwd(),'/',stock,'/', 'Table.csv'))
# Function arguments
buffer_window <- 10
gen_lag <- 5
y_obj <- 2025
preseason <- TRUE
postseason <- FALSE
F_state_forecast_method <- 'arima' #naive, or arima
run_forecast_method <- 'arima' #sibling or arima
# Data inputs
C_total=Table['Total.Kasilof.R..Catch']
C_EEZ=Table['Kasilof.R..EEZ.Catch']
Run=Table['Run']
Esc=Table['Escapement']
years=Table['Year']
# Esc goal using SMSY
Esc_goal = (222000/1000)
Esc_goal_pre = (222000/1000)
# State forecast for comparison using MAPE
sib_forecast = Forecast$Run.Forecast[Forecast$Year==y_obj]/1000
sib_forecast_full <- Forecast$Run.Forecast[Forecast$Year<=y_obj]/1000
# Calculate OFL to ABC Buffer
buffer_ABC <- buffer_fun_ABC(buffer_window=buffer_window,
y_obj=y_obj, #+1 if creating comparison plots
sib_forecast=sib_forecast,
C_total=C_total,
C_EEZ=C_EEZ,
Run=Run, Esc=Esc,
Esc_goal=Esc_goal_pre,
years=years,
gen_lag=gen_lag,
F_state_forecast_method=F_state_forecast_method,
run_forecast_method='arima')
# Perform Tier 1 Calculations
Tier_1_Table <- Tier_1_fun(y_obj=y_obj,
sib_forecast=sib_forecast,
C_total=C_total,
C_EEZ=C_EEZ,Run=Run,
Esc=Esc,
Esc_goal=Esc_goal,
Esc_goal_pre=Esc_goal_pre,
years=years,
ABC_buffer=buffer_ABC$buffer,
buffer_ABC = buffer_ABC,
preseason = preseason,
postseason=postseason,
gen_lag=gen_lag,
F_state_forecast_method=F_state_forecast_method,
run_forecast_method=run_forecast_method,
sib_forecast_full = sib_forecast_full)
Tier_1_Table
1-.197
library(Metrics)
source('Cook_Inlet_functions.R')
# Load Data
stock <- 'Kenai Sockeye'
Forecast <- read.csv(file=paste0(getwd(),'/',stock,'/', 'Forecasts.csv'))
Table <- read.csv(file=paste0(getwd(),'/',stock,'/', 'Table.csv'))
# Function arguments
buffer_window <- 10
gen_lag <- 5
y_obj <- 2025
preseason <- T
postseason <- F
F_state_forecast_method <- 'arima' #naive, or arima
run_forecast_method <- 'arima' #sibling or arima
# Data inputs
C_total=Table['TotalCatch']
View(Table)
head(Table)
# Data inputs
C_total=Table['Total.Catch']
C_EEZ=Table['Kenai.R..EEZ.Catch']
Run=Table['Run']
Esc=Table['Escapement']
years=Table['Year']
# Esc goal using SMSY
Esc_goal = Table$Smsy[Table$Year==max(Table$Year)]
Esc_goal_pre = Table$Smsy[Table$Year==max(Table$Year)]
# State forecast for comparison
sib_forecast = Forecast$Kenai.Total.Run.Forecast[Forecast$Year==y_obj]/1000
sib_forecast_full = Forecast$Kenai.Total.Run.Forecast[Forecast$Year<=y_obj]/1000
# Calculate OFL to ABC Buffer
buffer_ABC <- buffer_fun_ABC(buffer_window=buffer_window,
y_obj=y_obj,
sib_forecast=sib_forecast,
C_total=C_total,
C_EEZ=C_EEZ,Run=Run,
Esc=Esc,
Esc_goal=Esc_goal_pre,
years=years,
gen_lag=gen_lag,
F_state_forecast_method=F_state_forecast_method,
run_forecast_method=run_forecast_method)
# Data inputs
C_total=Table['Total.Catch']
C_EEZ=Table['Kenai.R..EEZ.Catch']
Run=Table['Run']
Esc=Table['Escapement']
years=Table['Year']
# Esc goal using SMSY
Esc_goal = Table$Smsy[Table$Year==max(Table$Year)]
Esc_goal_pre = Table$Smsy[Table$Year==max(Table$Year)]
# State forecast for comparison
sib_forecast = Forecast$Kenai.Total.Run.Forecast[Forecast$Year==y_obj]/1000
sib_forecast_full = Forecast$Kenai.Total.Run.Forecast[Forecast$Year<=y_obj]/1000
# Calculate OFL to ABC Buffer
buffer_ABC <- buffer_fun_ABC(buffer_window=buffer_window,
y_obj=y_obj,
sib_forecast=sib_forecast,
C_total=C_total,
C_EEZ=C_EEZ,Run=Run,
Esc=Esc,
Esc_goal=Esc_goal_pre,
years=years,
gen_lag=gen_lag,
F_state_forecast_method=F_state_forecast_method,
run_forecast_method=run_forecast_method)
C_total
C_EEZ
Run
Table$Run
Table$Run <- as.numeric(Table$Run)
Table$Run
# Load packages
library(forecast)
library(car)
library(boot)
library(tidyverse)
library(ggthemes)
library(ggpubr)
library(ggtext)
library(Metrics)
source('Cook_Inlet_functions.R')
# Load Data
stock <- 'Kenai Sockeye'
Forecast <- read.csv(file=paste0(getwd(),'/',stock,'/', 'Forecasts.csv'))
Table <- read.csv(file=paste0(getwd(),'/',stock,'/', 'Table.csv'))
# Function arguments
buffer_window <- 10
gen_lag <- 5
y_obj <- 2025
preseason <- T
postseason <- F
F_state_forecast_method <- 'arima' #naive, or arima
run_forecast_method <- 'arima' #sibling or arima
# Data inputs
C_total=Table['Total.Catch']
C_EEZ=Table['Kenai.R..EEZ.Catch']
Run=Table['Run']
Esc=Table['Escapement']
years=Table['Year']
# Esc goal using SMSY
Esc_goal = Table$Smsy[Table$Year==max(Table$Year)]
Esc_goal_pre = Table$Smsy[Table$Year==max(Table$Year)]
# State forecast for comparison
sib_forecast = Forecast$Kenai.Total.Run.Forecast[Forecast$Year==y_obj]/1000
sib_forecast_full = Forecast$Kenai.Total.Run.Forecast[Forecast$Year<=y_obj]/1000
# Calculate OFL to ABC Buffer
buffer_ABC <- buffer_fun_ABC(buffer_window=buffer_window,
y_obj=y_obj,
sib_forecast=sib_forecast,
C_total=C_total,
C_EEZ=C_EEZ,Run=Run,
Esc=Esc,
Esc_goal=Esc_goal_pre,
years=years,
gen_lag=gen_lag,
F_state_forecast_method=F_state_forecast_method,
run_forecast_method=run_forecast_method)
Run
Esc
years
C_total
source('Cook_Inlet_functions.R')
# Load Data
stock <- 'Kenai Sockeye'
Forecast <- read.csv(file=paste0(getwd(),'/',stock,'/', 'Forecasts.csv'))
Table <- read.csv(file=paste0(getwd(),'/',stock,'/', 'Table.csv'))
# Function arguments
buffer_window <- 10
gen_lag <- 5
y_obj <- 2025
preseason <- T
postseason <- F
F_state_forecast_method <- 'arima' #naive, or arima
run_forecast_method <- 'arima' #sibling or arima
# Data inputs
C_total=Table['Total.Catch']
C_EEZ=Table['Kenai.R..EEZ.Catch']
Run=Table['Run']
Esc=Table['Escapement']
years=Table['Year']
# Esc goal using SMSY
Esc_goal = Table$Smsy[Table$Year==max(Table$Year)]
Esc_goal_pre = Table$Smsy[Table$Year==max(Table$Year)]
# State forecast for comparison
sib_forecast = Forecast$Kenai.Total.Run.Forecast[Forecast$Year==y_obj]/1000
sib_forecast_full = Forecast$Kenai.Total.Run.Forecast[Forecast$Year<=y_obj]/1000
# Calculate OFL to ABC Buffer
buffer_ABC <- buffer_fun_ABC(buffer_window=buffer_window,
y_obj=y_obj,
sib_forecast=sib_forecast,
C_total=C_total,
C_EEZ=C_EEZ,Run=Run,
Esc=Esc,
Esc_goal=Esc_goal_pre,
years=years,
gen_lag=gen_lag,
F_state_forecast_method=F_state_forecast_method,
run_forecast_method=run_forecast_method)
C_total
C_EEZ
Run
C_EEZ
# Load Data
stock <- 'Kenai Sockeye'
Forecast <- read.csv(file=paste0(getwd(),'/',stock,'/', 'Forecasts.csv'))
Table <- read.csv(file=paste0(getwd(),'/',stock,'/', 'Table.csv'))
# Function arguments
buffer_window <- 10
gen_lag <- 5
y_obj <- 2025
preseason <- T
postseason <- F
F_state_forecast_method <- 'arima' #naive, or arima
run_forecast_method <- 'arima' #sibling or arima
# Data inputs
C_total=Table['Total.Catch']
C_EEZ=Table['Kenai.R..EEZ.Catch']
Run=Table['Run']
Esc=Table['Escapement']
years=Table['Year']
# Esc goal using SMSY
Esc_goal = Table$Smsy[Table$Year==max(Table$Year)]
Esc_goal_pre = Table$Smsy[Table$Year==max(Table$Year)]
# State forecast for comparison
sib_forecast = Forecast$Kenai.Total.Run.Forecast[Forecast$Year==y_obj]/1000
sib_forecast_full = Forecast$Kenai.Total.Run.Forecast[Forecast$Year<=y_obj]/1000
# Calculate OFL to ABC Buffer
buffer_ABC <- buffer_fun_ABC(buffer_window=buffer_window,
y_obj=y_obj,
sib_forecast=sib_forecast,
C_total=C_total,
C_EEZ=C_EEZ,Run=Run,
Esc=Esc,
Esc_goal=Esc_goal_pre,
years=years,
gen_lag=gen_lag,
F_state_forecast_method=F_state_forecast_method,
run_forecast_method=run_forecast_method)
# Perform Tier 1 Calculations
Tier_1_Table <- Tier_1_fun(y_obj=y_obj,
sib_forecast=sib_forecast,
C_total=C_total,
C_EEZ=C_EEZ,
Run=Run,
Esc=Esc,
Esc_goal=Esc_goal,
Esc_goal_pre=Esc_goal_pre,
years=years,
ABC_buffer=buffer_ABC$buffer,
buffer_ABC = buffer_ABC,#ABC_buffer=0.478,
preseason = preseason,
postseason=postseason,
plot = F,
# run_forecast_method= "arima",
gen_lag=gen_lag,
F_state_forecast_method=F_state_forecast_method,
run_forecast_method=run_forecast_method,
sib_forecast_full = sib_forecast_full)
Tier_1_Table
C_total
# Data inputs
C_total=Table['Total.Catch']
C_EEZ=Table['Kenai.R..EEZ.Catch']
library(Metrics)
source('Cook_Inlet_functions.R')
# Load Data
stock <- 'Kenai Sockeye'
Forecast <- read.csv(file=paste0(getwd(),'/',stock,'/', 'Forecasts.csv'))
Table <- read.csv(file=paste0(getwd(),'/',stock,'/', 'Table.csv'))
# Function arguments
buffer_window <- 10
gen_lag <- 5
y_obj <- 2025
preseason <- T
postseason <- F
F_state_forecast_method <- 'arima' #naive, or arima
run_forecast_method <- 'arima' #sibling or arima
View(Table)
